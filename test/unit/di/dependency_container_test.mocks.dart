// Mocks generated by Mockito 5.4.6 from annotations
// in customfit_ai_flutter_sdk/test/unit/di/dependency_container_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i18;

import 'package:customfit_ai_flutter_sdk/src/analytics/event/event_data.dart'
    as _i22;
import 'package:customfit_ai_flutter_sdk/src/analytics/event/event_tracker.dart'
    as _i7;
import 'package:customfit_ai_flutter_sdk/src/analytics/summary/summary_manager.dart'
    as _i6;
import 'package:customfit_ai_flutter_sdk/src/client/managers/config_manager.dart'
    as _i8;
import 'package:customfit_ai_flutter_sdk/src/client/managers/environment_manager.dart'
    as _i10;
import 'package:customfit_ai_flutter_sdk/src/client/managers/listener_manager.dart'
    as _i11;
import 'package:customfit_ai_flutter_sdk/src/client/managers/user_manager.dart'
    as _i9;
import 'package:customfit_ai_flutter_sdk/src/config/core/cf_config.dart'
    as _i15;
import 'package:customfit_ai_flutter_sdk/src/core/error/cf_result.dart' as _i12;
import 'package:customfit_ai_flutter_sdk/src/core/model/cf_user.dart' as _i16;
import 'package:customfit_ai_flutter_sdk/src/core/session/session_manager.dart'
    as _i17;
import 'package:customfit_ai_flutter_sdk/src/di/dependency_container.dart'
    as _i14;
import 'package:customfit_ai_flutter_sdk/src/network/config/config_fetcher.dart'
    as _i5;
import 'package:customfit_ai_flutter_sdk/src/network/connection/connection_information.dart'
    as _i13;
import 'package:customfit_ai_flutter_sdk/src/network/connection/connection_manager.dart'
    as _i3;
import 'package:customfit_ai_flutter_sdk/src/network/connection/connection_status.dart'
    as _i21;
import 'package:customfit_ai_flutter_sdk/src/network/http_client.dart' as _i2;
import 'package:customfit_ai_flutter_sdk/src/platform/default_background_state_monitor.dart'
    as _i4;
import 'package:dio/dio.dart' as _i20;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i19;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpClient_0 extends _i1.SmartFake implements _i2.HttpClient {
  _FakeHttpClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectionManagerImpl_1 extends _i1.SmartFake
    implements _i3.ConnectionManagerImpl {
  _FakeConnectionManagerImpl_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBackgroundStateMonitor_2 extends _i1.SmartFake
    implements _i4.BackgroundStateMonitor {
  _FakeBackgroundStateMonitor_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfigFetcher_3 extends _i1.SmartFake implements _i5.ConfigFetcher {
  _FakeConfigFetcher_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSummaryManager_4 extends _i1.SmartFake
    implements _i6.SummaryManager {
  _FakeSummaryManager_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEventTracker_5 extends _i1.SmartFake implements _i7.EventTracker {
  _FakeEventTracker_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfigManager_6 extends _i1.SmartFake implements _i8.ConfigManager {
  _FakeConfigManager_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserManager_7 extends _i1.SmartFake implements _i9.UserManager {
  _FakeUserManager_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEnvironmentManager_8 extends _i1.SmartFake
    implements _i10.EnvironmentManager {
  _FakeEnvironmentManager_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeListenerManager_9 extends _i1.SmartFake
    implements _i11.ListenerManager {
  _FakeListenerManager_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCFResult_10<T> extends _i1.SmartFake implements _i12.CFResult<T> {
  _FakeCFResult_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectionInformation_11 extends _i1.SmartFake
    implements _i13.ConnectionInformation {
  _FakeConnectionInformation_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DependencyFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDependencyFactory extends _i1.Mock implements _i14.DependencyFactory {
  MockDependencyFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpClient createHttpClient(_i15.CFConfig? config) => (super.noSuchMethod(
        Invocation.method(
          #createHttpClient,
          [config],
        ),
        returnValue: _FakeHttpClient_0(
          this,
          Invocation.method(
            #createHttpClient,
            [config],
          ),
        ),
      ) as _i2.HttpClient);

  @override
  _i3.ConnectionManagerImpl createConnectionManager(_i15.CFConfig? config) =>
      (super.noSuchMethod(
        Invocation.method(
          #createConnectionManager,
          [config],
        ),
        returnValue: _FakeConnectionManagerImpl_1(
          this,
          Invocation.method(
            #createConnectionManager,
            [config],
          ),
        ),
      ) as _i3.ConnectionManagerImpl);

  @override
  _i4.BackgroundStateMonitor createBackgroundMonitor() => (super.noSuchMethod(
        Invocation.method(
          #createBackgroundMonitor,
          [],
        ),
        returnValue: _FakeBackgroundStateMonitor_2(
          this,
          Invocation.method(
            #createBackgroundMonitor,
            [],
          ),
        ),
      ) as _i4.BackgroundStateMonitor);

  @override
  _i5.ConfigFetcher createConfigFetcher(
    _i2.HttpClient? httpClient,
    _i15.CFConfig? config,
    _i16.CFUser? user,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createConfigFetcher,
          [
            httpClient,
            config,
            user,
          ],
        ),
        returnValue: _FakeConfigFetcher_3(
          this,
          Invocation.method(
            #createConfigFetcher,
            [
              httpClient,
              config,
              user,
            ],
          ),
        ),
      ) as _i5.ConfigFetcher);

  @override
  _i6.SummaryManager createSummaryManager(
    String? sessionId,
    _i2.HttpClient? httpClient,
    _i16.CFUser? user,
    _i15.CFConfig? config,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSummaryManager,
          [
            sessionId,
            httpClient,
            user,
            config,
          ],
        ),
        returnValue: _FakeSummaryManager_4(
          this,
          Invocation.method(
            #createSummaryManager,
            [
              sessionId,
              httpClient,
              user,
              config,
            ],
          ),
        ),
      ) as _i6.SummaryManager);

  @override
  _i7.EventTracker createEventTracker(
    _i2.HttpClient? httpClient,
    _i3.ConnectionManagerImpl? connectionManager,
    _i16.CFUser? user,
    String? sessionId,
    _i15.CFConfig? config,
    _i6.SummaryManager? summaryManager,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createEventTracker,
          [
            httpClient,
            connectionManager,
            user,
            sessionId,
            config,
            summaryManager,
          ],
        ),
        returnValue: _FakeEventTracker_5(
          this,
          Invocation.method(
            #createEventTracker,
            [
              httpClient,
              connectionManager,
              user,
              sessionId,
              config,
              summaryManager,
            ],
          ),
        ),
      ) as _i7.EventTracker);

  @override
  _i17.SessionManager? createSessionManager(_i15.CFConfig? config) =>
      (super.noSuchMethod(Invocation.method(
        #createSessionManager,
        [config],
      )) as _i17.SessionManager?);

  @override
  _i8.ConfigManager createConfigManager(
    _i15.CFConfig? config,
    _i5.ConfigFetcher? configFetcher,
    _i3.ConnectionManagerImpl? connectionManager,
    _i6.SummaryManager? summaryManager,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createConfigManager,
          [
            config,
            configFetcher,
            connectionManager,
            summaryManager,
          ],
        ),
        returnValue: _FakeConfigManager_6(
          this,
          Invocation.method(
            #createConfigManager,
            [
              config,
              configFetcher,
              connectionManager,
              summaryManager,
            ],
          ),
        ),
      ) as _i8.ConfigManager);

  @override
  _i9.UserManager createUserManager(_i16.CFUser? user) => (super.noSuchMethod(
        Invocation.method(
          #createUserManager,
          [user],
        ),
        returnValue: _FakeUserManager_7(
          this,
          Invocation.method(
            #createUserManager,
            [user],
          ),
        ),
      ) as _i9.UserManager);

  @override
  _i10.EnvironmentManager createEnvironmentManager(
    _i4.BackgroundStateMonitor? backgroundMonitor,
    _i9.UserManager? userManager,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createEnvironmentManager,
          [
            backgroundMonitor,
            userManager,
          ],
        ),
        returnValue: _FakeEnvironmentManager_8(
          this,
          Invocation.method(
            #createEnvironmentManager,
            [
              backgroundMonitor,
              userManager,
            ],
          ),
        ),
      ) as _i10.EnvironmentManager);

  @override
  _i11.ListenerManager createListenerManager() => (super.noSuchMethod(
        Invocation.method(
          #createListenerManager,
          [],
        ),
        returnValue: _FakeListenerManager_9(
          this,
          Invocation.method(
            #createListenerManager,
            [],
          ),
        ),
      ) as _i11.ListenerManager);
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i2.HttpClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void updateConnectionTimeout(int? timeoutMs) => super.noSuchMethod(
        Invocation.method(
          #updateConnectionTimeout,
          [timeoutMs],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateReadTimeout(int? timeoutMs) => super.noSuchMethod(
        Invocation.method(
          #updateReadTimeout,
          [timeoutMs],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i18.Future<_i12.CFResult<Map<String, String>>> fetchMetadata(
    String? url, {
    String? lastModified,
    String? etag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMetadata,
          [url],
          {
            #lastModified: lastModified,
            #etag: etag,
          },
        ),
        returnValue: _i18.Future<_i12.CFResult<Map<String, String>>>.value(
            _FakeCFResult_10<Map<String, String>>(
          this,
          Invocation.method(
            #fetchMetadata,
            [url],
            {
              #lastModified: lastModified,
              #etag: etag,
            },
          ),
        )),
      ) as _i18.Future<_i12.CFResult<Map<String, String>>>);

  @override
  _i18.Future<_i12.CFResult<Map<String, dynamic>>> fetchJson(String? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchJson,
          [url],
        ),
        returnValue: _i18.Future<_i12.CFResult<Map<String, dynamic>>>.value(
            _FakeCFResult_10<Map<String, dynamic>>(
          this,
          Invocation.method(
            #fetchJson,
            [url],
          ),
        )),
      ) as _i18.Future<_i12.CFResult<Map<String, dynamic>>>);

  @override
  _i18.Future<_i12.CFResult<bool>> postJson(
    String? url,
    String? payload,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #postJson,
          [
            url,
            payload,
          ],
        ),
        returnValue:
            _i18.Future<_i12.CFResult<bool>>.value(_FakeCFResult_10<bool>(
          this,
          Invocation.method(
            #postJson,
            [
              url,
              payload,
            ],
          ),
        )),
      ) as _i18.Future<_i12.CFResult<bool>>);

  @override
  _i18.Future<_i12.CFResult<T>> post<T>(
    String? path, {
    dynamic data,
    Map<String, String>? headers,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i18.Future<_i12.CFResult<T>>.value(_FakeCFResult_10<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i18.Future<_i12.CFResult<T>>);

  @override
  _i18.Future<_i12.CFResult<Map<String, String>>> head(
    String? path, {
    Map<String, String>? headers,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i18.Future<_i12.CFResult<Map<String, String>>>.value(
            _FakeCFResult_10<Map<String, String>>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i18.Future<_i12.CFResult<Map<String, String>>>);

  @override
  Map<String, dynamic> getConnectionPoolMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionPoolMetrics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void cleanup() => super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i18.Future<_i12.CFResult<T>> get<T>(
    String? path, {
    Map<String, String>? headers,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i18.Future<_i12.CFResult<T>>.value(_FakeCFResult_10<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i18.Future<_i12.CFResult<T>>);

  @override
  _i18.Future<_i12.CFResult<T>> put<T>(
    String? path, {
    dynamic data,
    Map<String, String>? headers,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i18.Future<_i12.CFResult<T>>.value(_FakeCFResult_10<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i18.Future<_i12.CFResult<T>>);

  @override
  String getBaseUrl() => (super.noSuchMethod(
        Invocation.method(
          #getBaseUrl,
          [],
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #getBaseUrl,
            [],
          ),
        ),
      ) as String);

  @override
  String getFullUrl(String? path) => (super.noSuchMethod(
        Invocation.method(
          #getFullUrl,
          [path],
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #getFullUrl,
            [path],
          ),
        ),
      ) as String);

  @override
  _i18.Future<_i12.CFResult<_i20.Response<dynamic>>> headResponse(
    String? path, {
    _i20.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headResponse,
          [path],
          {#options: options},
        ),
        returnValue: _i18.Future<_i12.CFResult<_i20.Response<dynamic>>>.value(
            _FakeCFResult_10<_i20.Response<dynamic>>(
          this,
          Invocation.method(
            #headResponse,
            [path],
            {#options: options},
          ),
        )),
      ) as _i18.Future<_i12.CFResult<_i20.Response<dynamic>>>);
}

/// A class which mocks [ConnectionManagerImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionManagerImpl extends _i1.Mock
    implements _i3.ConnectionManagerImpl {
  MockConnectionManagerImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setupListeners() => super.noSuchMethod(
        Invocation.method(
          #setupListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isOffline() => (super.noSuchMethod(
        Invocation.method(
          #isOffline,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i21.ConnectionStatus getConnectionStatus() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionStatus,
          [],
        ),
        returnValue: _i21.ConnectionStatus.connected,
      ) as _i21.ConnectionStatus);

  @override
  _i13.ConnectionInformation getConnectionInformation() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionInformation,
          [],
        ),
        returnValue: _FakeConnectionInformation_11(
          this,
          Invocation.method(
            #getConnectionInformation,
            [],
          ),
        ),
      ) as _i13.ConnectionInformation);

  @override
  void addConnectionStatusListener(_i3.ConnectionStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #addConnectionStatusListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeConnectionStatusListener(_i3.ConnectionStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeConnectionStatusListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOfflineMode(bool? offline) => super.noSuchMethod(
        Invocation.method(
          #setOfflineMode,
          [offline],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordConnectionSuccess() => super.noSuchMethod(
        Invocation.method(
          #recordConnectionSuccess,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordConnectionFailure(String? error) => super.noSuchMethod(
        Invocation.method(
          #recordConnectionFailure,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void checkConnection() => super.noSuchMethod(
        Invocation.method(
          #checkConnection,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void shutdown() => super.noSuchMethod(
        Invocation.method(
          #shutdown,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [EventTracker].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventTracker extends _i1.Mock implements _i7.EventTracker {
  MockEventTracker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setupListeners({void Function(_i22.EventData)? onEventTracked}) =>
      super.noSuchMethod(
        Invocation.method(
          #setupListeners,
          [],
          {#onEventTracked: onEventTracked},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i18.Future<_i12.CFResult<void>> trackEvent(
    String? eventName,
    Map<String, dynamic>? properties,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackEvent,
          [
            eventName,
            properties,
          ],
        ),
        returnValue:
            _i18.Future<_i12.CFResult<void>>.value(_FakeCFResult_10<void>(
          this,
          Invocation.method(
            #trackEvent,
            [
              eventName,
              properties,
            ],
          ),
        )),
      ) as _i18.Future<_i12.CFResult<void>>);

  @override
  _i18.Future<_i12.CFResult<void>> trackBatch(List<_i22.EventData>? events) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackBatch,
          [events],
        ),
        returnValue:
            _i18.Future<_i12.CFResult<void>>.value(_FakeCFResult_10<void>(
          this,
          Invocation.method(
            #trackBatch,
            [events],
          ),
        )),
      ) as _i18.Future<_i12.CFResult<void>>);

  @override
  _i18.Future<_i12.CFResult<List<_i22.EventData>>> trackEvents(
          List<_i22.EventData>? events) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackEvents,
          [events],
        ),
        returnValue: _i18.Future<_i12.CFResult<List<_i22.EventData>>>.value(
            _FakeCFResult_10<List<_i22.EventData>>(
          this,
          Invocation.method(
            #trackEvents,
            [events],
          ),
        )),
      ) as _i18.Future<_i12.CFResult<List<_i22.EventData>>>);

  @override
  _i18.Future<_i12.CFResult<bool>> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue:
            _i18.Future<_i12.CFResult<bool>>.value(_FakeCFResult_10<bool>(
          this,
          Invocation.method(
            #flush,
            [],
          ),
        )),
      ) as _i18.Future<_i12.CFResult<bool>>);

  @override
  void onConnectionStatusChanged(
    _i21.ConnectionStatus? status,
    _i13.ConnectionInformation? info,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onConnectionStatusChanged,
          [
            status,
            info,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setEventCallback(_i7.EventCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #setEventCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOnEventsDroppedCallback(
          void Function(
            int,
            String,
          )? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #setOnEventsDroppedCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOnBackpressureAppliedCallback(
          void Function(Map<String, dynamic>)? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #setOnBackpressureAppliedCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setAutoFlushEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setAutoFlushEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i18.Future<_i12.CFResult<bool>> flushEvents() => (super.noSuchMethod(
        Invocation.method(
          #flushEvents,
          [],
        ),
        returnValue:
            _i18.Future<_i12.CFResult<bool>>.value(_FakeCFResult_10<bool>(
          this,
          Invocation.method(
            #flushEvents,
            [],
          ),
        )),
      ) as _i18.Future<_i12.CFResult<bool>>);

  @override
  int getPendingEventsCount() => (super.noSuchMethod(
        Invocation.method(
          #getPendingEventsCount,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  int getDroppedEventsCount() => (super.noSuchMethod(
        Invocation.method(
          #getDroppedEventsCount,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  void clearEvents() => super.noSuchMethod(
        Invocation.method(
          #clearEvents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i18.Future<void> shutdown() => (super.noSuchMethod(
        Invocation.method(
          #shutdown,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);

  @override
  Map<String, dynamic> getBackpressureMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getBackpressureMetrics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> getHealthMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getHealthMetrics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [SummaryManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSummaryManager extends _i1.Mock implements _i6.SummaryManager {
  MockSummaryManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void updateFlushInterval(int? intervalMs) => super.noSuchMethod(
        Invocation.method(
          #updateFlushInterval,
          [intervalMs],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int getPendingSummariesCount() => (super.noSuchMethod(
        Invocation.method(
          #getPendingSummariesCount,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  void clearSummaries() => super.noSuchMethod(
        Invocation.method(
          #clearSummaries,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i18.Future<_i12.CFResult<bool>> pushSummary(Map<String, dynamic>? config) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushSummary,
          [config],
        ),
        returnValue:
            _i18.Future<_i12.CFResult<bool>>.value(_FakeCFResult_10<bool>(
          this,
          Invocation.method(
            #pushSummary,
            [config],
          ),
        )),
      ) as _i18.Future<_i12.CFResult<bool>>);

  @override
  _i18.Future<_i12.CFResult<int>> flushSummaries() => (super.noSuchMethod(
        Invocation.method(
          #flushSummaries,
          [],
        ),
        returnValue:
            _i18.Future<_i12.CFResult<int>>.value(_FakeCFResult_10<int>(
          this,
          Invocation.method(
            #flushSummaries,
            [],
          ),
        )),
      ) as _i18.Future<_i12.CFResult<int>>);

  @override
  Map<String, bool> getSummaries() => (super.noSuchMethod(
        Invocation.method(
          #getSummaries,
          [],
        ),
        returnValue: <String, bool>{},
      ) as Map<String, bool>);

  @override
  int getQueueSize() => (super.noSuchMethod(
        Invocation.method(
          #getQueueSize,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  void shutdown() => super.noSuchMethod(
        Invocation.method(
          #shutdown,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConfigFetcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigFetcher extends _i1.Mock implements _i5.ConfigFetcher {
  MockConfigFetcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isOffline() => (super.noSuchMethod(
        Invocation.method(
          #isOffline,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void setOffline(bool? offline) => super.noSuchMethod(
        Invocation.method(
          #setOffline,
          [offline],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i18.Future<bool> fetchConfig({
    String? lastModified,
    String? etag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchConfig,
          [],
          {
            #lastModified: lastModified,
            #etag: etag,
          },
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<_i12.CFResult<Map<String, String>>> fetchMetadata(
          [String? url]) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMetadata,
          [url],
        ),
        returnValue: _i18.Future<_i12.CFResult<Map<String, String>>>.value(
            _FakeCFResult_10<Map<String, String>>(
          this,
          Invocation.method(
            #fetchMetadata,
            [url],
          ),
        )),
      ) as _i18.Future<_i12.CFResult<Map<String, String>>>);

  @override
  _i12.CFResult<Map<String, dynamic>> getConfigs() => (super.noSuchMethod(
        Invocation.method(
          #getConfigs,
          [],
        ),
        returnValue: _FakeCFResult_10<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getConfigs,
            [],
          ),
        ),
      ) as _i12.CFResult<Map<String, dynamic>>);

  @override
  _i18.Future<_i12.CFResult<Map<String, dynamic>>> fetchSdkSettings() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSdkSettings,
          [],
        ),
        returnValue: _i18.Future<_i12.CFResult<Map<String, dynamic>>>.value(
            _FakeCFResult_10<Map<String, dynamic>>(
          this,
          Invocation.method(
            #fetchSdkSettings,
            [],
          ),
        )),
      ) as _i18.Future<_i12.CFResult<Map<String, dynamic>>>);

  @override
  bool flagExists(String? flagKey) => (super.noSuchMethod(
        Invocation.method(
          #flagExists,
          [flagKey],
        ),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic>? getFlagConfig(String? flagKey) =>
      (super.noSuchMethod(Invocation.method(
        #getFlagConfig,
        [flagKey],
      )) as Map<String, dynamic>?);

  @override
  _i12.CFResult<Map<String, dynamic>> getConfig(String? flagKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConfig,
          [flagKey],
        ),
        returnValue: _FakeCFResult_10<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getConfig,
            [flagKey],
          ),
        ),
      ) as _i12.CFResult<Map<String, dynamic>>);

  @override
  bool hasFlag(String? flagKey) => (super.noSuchMethod(
        Invocation.method(
          #hasFlag,
          [flagKey],
        ),
        returnValue: false,
      ) as bool);

  @override
  void clearConfigs() => super.noSuchMethod(
        Invocation.method(
          #clearConfigs,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
