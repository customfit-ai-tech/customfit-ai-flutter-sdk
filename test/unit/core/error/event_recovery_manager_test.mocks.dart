// Mocks generated by Mockito 5.4.6 from annotations
// in customfit_ai_flutter_sdk/test/unit/core/error/event_recovery_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:customfit_ai_flutter_sdk/src/analytics/event/event_data.dart'
    as _i4;
import 'package:customfit_ai_flutter_sdk/src/analytics/event/event_tracker.dart'
    as _i3;
import 'package:customfit_ai_flutter_sdk/src/core/error/cf_result.dart' as _i2;
import 'package:customfit_ai_flutter_sdk/src/core/memory/memory_pressure_level.dart'
    as _i11;
import 'package:customfit_ai_flutter_sdk/src/core/util/cache_manager.dart'
    as _i8;
import 'package:customfit_ai_flutter_sdk/src/core/util/type_conversion_strategy.dart'
    as _i10;
import 'package:customfit_ai_flutter_sdk/src/network/connection/connection_information.dart'
    as _i7;
import 'package:customfit_ai_flutter_sdk/src/network/connection/connection_status.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCFResult_0<T> extends _i1.SmartFake implements _i2.CFResult<T> {
  _FakeCFResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EventTracker].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventTracker extends _i1.Mock implements _i3.EventTracker {
  MockEventTracker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setupListeners({void Function(_i4.EventData)? onEventTracked}) =>
      super.noSuchMethod(
        Invocation.method(
          #setupListeners,
          [],
          {#onEventTracked: onEventTracked},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.CFResult<void>> trackEvent(
    String? eventName,
    Map<String, dynamic>? properties,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackEvent,
          [
            eventName,
            properties,
          ],
        ),
        returnValue: _i5.Future<_i2.CFResult<void>>.value(_FakeCFResult_0<void>(
          this,
          Invocation.method(
            #trackEvent,
            [
              eventName,
              properties,
            ],
          ),
        )),
      ) as _i5.Future<_i2.CFResult<void>>);

  @override
  _i5.Future<_i2.CFResult<void>> trackBatch(List<_i4.EventData>? events) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackBatch,
          [events],
        ),
        returnValue: _i5.Future<_i2.CFResult<void>>.value(_FakeCFResult_0<void>(
          this,
          Invocation.method(
            #trackBatch,
            [events],
          ),
        )),
      ) as _i5.Future<_i2.CFResult<void>>);

  @override
  _i5.Future<_i2.CFResult<List<_i4.EventData>>> trackEvents(
          List<_i4.EventData>? events) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackEvents,
          [events],
        ),
        returnValue: _i5.Future<_i2.CFResult<List<_i4.EventData>>>.value(
            _FakeCFResult_0<List<_i4.EventData>>(
          this,
          Invocation.method(
            #trackEvents,
            [events],
          ),
        )),
      ) as _i5.Future<_i2.CFResult<List<_i4.EventData>>>);

  @override
  _i5.Future<_i2.CFResult<bool>> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i5.Future<_i2.CFResult<bool>>.value(_FakeCFResult_0<bool>(
          this,
          Invocation.method(
            #flush,
            [],
          ),
        )),
      ) as _i5.Future<_i2.CFResult<bool>>);

  @override
  void onConnectionStatusChanged(
    _i6.ConnectionStatus? status,
    _i7.ConnectionInformation? info,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onConnectionStatusChanged,
          [
            status,
            info,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setEventCallback(_i3.EventCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #setEventCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOnEventsDroppedCallback(
          void Function(
            int,
            String,
          )? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #setOnEventsDroppedCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOnBackpressureAppliedCallback(
          void Function(Map<String, dynamic>)? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #setOnBackpressureAppliedCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setAutoFlushEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setAutoFlushEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.CFResult<bool>> flushEvents() => (super.noSuchMethod(
        Invocation.method(
          #flushEvents,
          [],
        ),
        returnValue: _i5.Future<_i2.CFResult<bool>>.value(_FakeCFResult_0<bool>(
          this,
          Invocation.method(
            #flushEvents,
            [],
          ),
        )),
      ) as _i5.Future<_i2.CFResult<bool>>);

  @override
  int getPendingEventsCount() => (super.noSuchMethod(
        Invocation.method(
          #getPendingEventsCount,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  int getDroppedEventsCount() => (super.noSuchMethod(
        Invocation.method(
          #getDroppedEventsCount,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  void clearEvents() => super.noSuchMethod(
        Invocation.method(
          #clearEvents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> shutdown() => (super.noSuchMethod(
        Invocation.method(
          #shutdown,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  Map<String, dynamic> getBackpressureMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getBackpressureMetrics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> getHealthMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getHealthMetrics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [CacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheManager extends _i1.Mock implements _i8.CacheManager {
  MockCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get componentName => (super.noSuchMethod(
        Invocation.getter(#componentName),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#componentName),
        ),
      ) as String);

  @override
  int get memoryPriority => (super.noSuchMethod(
        Invocation.getter(#memoryPriority),
        returnValue: 0,
      ) as int);

  @override
  bool get canCleanup => (super.noSuchMethod(
        Invocation.getter(#canCleanup),
        returnValue: false,
      ) as bool);

  @override
  int get estimatedMemoryUsage => (super.noSuchMethod(
        Invocation.getter(#estimatedMemoryUsage),
        returnValue: 0,
      ) as int);

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> put<T>(
    String? key,
    T? value, {
    _i8.CachePolicy? policy = _i8.CachePolicy.standard,
    Map<String, String>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
          {
            #policy: policy,
            #metadata: metadata,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<T?> get<T>(
    String? key, {
    bool? allowExpired = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
          {#allowExpired: allowExpired},
        ),
        returnValue: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);

  @override
  void registerConversionStrategy(
          _i10.TypeConversionStrategy<dynamic>? strategy) =>
      super.noSuchMethod(
        Invocation.method(
          #registerConversionStrategy,
          [strategy],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeConversionStrategy<
          T extends _i10.TypeConversionStrategy<dynamic>>() =>
      super.noSuchMethod(
        Invocation.method(
          #removeConversionStrategy,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasConversionStrategyFor(Type? type) => (super.noSuchMethod(
        Invocation.method(
          #hasConversionStrategyFor,
          [type],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<bool> contains(String? key) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [key],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<T?> refresh<T>(
    String? key,
    _i5.Future<T> Function()? provider, {
    _i8.CachePolicy? policy = _i8.CachePolicy.standard,
    Map<String, String>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [
            key,
            provider,
          ],
          {
            #policy: policy,
            #metadata: metadata,
          },
        ),
        returnValue: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);

  @override
  _i5.Future<T?> getOrFetch<T>(
    String? key,
    _i5.Future<T> Function()? provider, {
    _i8.CachePolicy? policy = _i8.CachePolicy.standard,
    Map<String, String>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrFetch,
          [
            key,
            provider,
          ],
          {
            #policy: policy,
            #metadata: metadata,
          },
        ),
        returnValue: _i5.Future<T?>.value(),
      ) as _i5.Future<T?>);

  @override
  _i5.Future<Map<String, dynamic>> getCacheSizeStats() => (super.noSuchMethod(
        Invocation.method(
          #getCacheSizeStats,
          [],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<_i2.CFResult<bool>> clearImproved() => (super.noSuchMethod(
        Invocation.method(
          #clearImproved,
          [],
        ),
        returnValue: _i5.Future<_i2.CFResult<bool>>.value(_FakeCFResult_0<bool>(
          this,
          Invocation.method(
            #clearImproved,
            [],
          ),
        )),
      ) as _i5.Future<_i2.CFResult<bool>>);

  @override
  _i5.Future<_i2.CFResult<T>> refreshImproved<T>(
    String? key,
    _i5.Future<T> Function()? provider, {
    _i8.CachePolicy? policy = _i8.CachePolicy.standard,
    Map<String, String>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshImproved,
          [
            key,
            provider,
          ],
          {
            #policy: policy,
            #metadata: metadata,
          },
        ),
        returnValue: _i5.Future<_i2.CFResult<T>>.value(_FakeCFResult_0<T>(
          this,
          Invocation.method(
            #refreshImproved,
            [
              key,
              provider,
            ],
            {
              #policy: policy,
              #metadata: metadata,
            },
          ),
        )),
      ) as _i5.Future<_i2.CFResult<T>>);

  @override
  _i5.Future<_i2.CFResult<T>> getOrFetchImproved<T>(
    String? key,
    _i5.Future<T> Function()? provider, {
    _i8.CachePolicy? policy = _i8.CachePolicy.standard,
    Map<String, String>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrFetchImproved,
          [
            key,
            provider,
          ],
          {
            #policy: policy,
            #metadata: metadata,
          },
        ),
        returnValue: _i5.Future<_i2.CFResult<T>>.value(_FakeCFResult_0<T>(
          this,
          Invocation.method(
            #getOrFetchImproved,
            [
              key,
              provider,
            ],
            {
              #policy: policy,
              #metadata: metadata,
            },
          ),
        )),
      ) as _i5.Future<_i2.CFResult<T>>);

  @override
  _i5.Future<_i2.CFResult<T>> getImproved<T>(
    String? key, {
    bool? allowExpired = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImproved,
          [key],
          {#allowExpired: allowExpired},
        ),
        returnValue: _i5.Future<_i2.CFResult<T>>.value(_FakeCFResult_0<T>(
          this,
          Invocation.method(
            #getImproved,
            [key],
            {#allowExpired: allowExpired},
          ),
        )),
      ) as _i5.Future<_i2.CFResult<T>>);

  @override
  _i5.Future<void> onMemoryPressure(_i11.MemoryPressureLevel? level) =>
      (super.noSuchMethod(
        Invocation.method(
          #onMemoryPressure,
          [level],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
