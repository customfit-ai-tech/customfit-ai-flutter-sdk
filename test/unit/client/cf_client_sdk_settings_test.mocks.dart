// Mocks generated by Mockito 5.4.6 from annotations
// in customfit_ai_flutter_sdk/test/unit/client/cf_client_sdk_settings_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:customfit_ai_flutter_sdk/src/analytics/summary/summary_manager.dart'
    as _i10;
import 'package:customfit_ai_flutter_sdk/src/client/managers/config_manager.dart'
    as _i6;
import 'package:customfit_ai_flutter_sdk/src/config/core/cf_config.dart' as _i9;
import 'package:customfit_ai_flutter_sdk/src/core/error/cf_result.dart' as _i2;
import 'package:customfit_ai_flutter_sdk/src/network/config/config_fetcher.dart'
    as _i4;
import 'package:customfit_ai_flutter_sdk/src/network/connection/connection_information.dart'
    as _i3;
import 'package:customfit_ai_flutter_sdk/src/network/connection/connection_manager.dart'
    as _i11;
import 'package:customfit_ai_flutter_sdk/src/network/connection/connection_status.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCFResult_0<T> extends _i1.SmartFake implements _i2.CFResult<T> {
  _FakeCFResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectionInformation_1 extends _i1.SmartFake
    implements _i3.ConnectionInformation {
  _FakeConnectionInformation_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConfigFetcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigFetcher extends _i1.Mock implements _i4.ConfigFetcher {
  MockConfigFetcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isOffline() => (super.noSuchMethod(
        Invocation.method(
          #isOffline,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void setOffline(bool? offline) => super.noSuchMethod(
        Invocation.method(
          #setOffline,
          [offline],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<bool> fetchConfig({
    String? lastModified,
    String? etag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchConfig,
          [],
          {
            #lastModified: lastModified,
            #etag: etag,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i2.CFResult<Map<String, String>>> fetchMetadata([String? url]) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMetadata,
          [url],
        ),
        returnValue: _i5.Future<_i2.CFResult<Map<String, String>>>.value(
            _FakeCFResult_0<Map<String, String>>(
          this,
          Invocation.method(
            #fetchMetadata,
            [url],
          ),
        )),
      ) as _i5.Future<_i2.CFResult<Map<String, String>>>);

  @override
  _i2.CFResult<Map<String, dynamic>> getConfigs() => (super.noSuchMethod(
        Invocation.method(
          #getConfigs,
          [],
        ),
        returnValue: _FakeCFResult_0<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getConfigs,
            [],
          ),
        ),
      ) as _i2.CFResult<Map<String, dynamic>>);

  @override
  _i5.Future<_i2.CFResult<Map<String, dynamic>>> fetchSdkSettings() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSdkSettings,
          [],
        ),
        returnValue: _i5.Future<_i2.CFResult<Map<String, dynamic>>>.value(
            _FakeCFResult_0<Map<String, dynamic>>(
          this,
          Invocation.method(
            #fetchSdkSettings,
            [],
          ),
        )),
      ) as _i5.Future<_i2.CFResult<Map<String, dynamic>>>);

  @override
  bool flagExists(String? flagKey) => (super.noSuchMethod(
        Invocation.method(
          #flagExists,
          [flagKey],
        ),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic>? getFlagConfig(String? flagKey) =>
      (super.noSuchMethod(Invocation.method(
        #getFlagConfig,
        [flagKey],
      )) as Map<String, dynamic>?);

  @override
  _i2.CFResult<Map<String, dynamic>> getConfig(String? flagKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConfig,
          [flagKey],
        ),
        returnValue: _FakeCFResult_0<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getConfig,
            [flagKey],
          ),
        ),
      ) as _i2.CFResult<Map<String, dynamic>>);

  @override
  bool hasFlag(String? flagKey) => (super.noSuchMethod(
        Invocation.method(
          #hasFlag,
          [flagKey],
        ),
        returnValue: false,
      ) as bool);

  @override
  void clearConfigs() => super.noSuchMethod(
        Invocation.method(
          #clearConfigs,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConfigManagerImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigManagerImpl extends _i1.Mock implements _i6.ConfigManagerImpl {
  MockConfigManagerImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String getString(
    String? key,
    String? defaultValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getString,
          [
            key,
            defaultValue,
          ],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getString,
            [
              key,
              defaultValue,
            ],
          ),
        ),
      ) as String);

  @override
  bool getBoolean(
    String? key,
    bool? defaultValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBoolean,
          [
            key,
            defaultValue,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  num getNumber(
    String? key,
    num? defaultValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNumber,
          [
            key,
            defaultValue,
          ],
        ),
        returnValue: 0,
      ) as num);

  @override
  Map<String, dynamic> getJson(
    String? key,
    Map<String, dynamic>? defaultValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJson,
          [
            key,
            defaultValue,
          ],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  T getConfigValue<T>(
    String? key,
    T? defaultValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConfigValue,
          [
            key,
            defaultValue,
          ],
        ),
        returnValue: _i7.dummyValue<T>(
          this,
          Invocation.method(
            #getConfigValue,
            [
              key,
              defaultValue,
            ],
          ),
        ),
      ) as T);

  @override
  void addConfigListener<T>(
    String? key,
    void Function(T)? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addConfigListener,
          [
            key,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeConfigListener<T>(
    String? key,
    void Function(T)? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeConfigListener,
          [
            key,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearConfigListeners(String? key) => super.noSuchMethod(
        Invocation.method(
          #clearConfigListeners,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> getAllFlags() => (super.noSuchMethod(
        Invocation.method(
          #getAllFlags,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic>? getFullFlagConfig(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getFullFlagConfig,
        [key],
      )) as Map<String, dynamic>?);

  @override
  Map<String, Map<String, dynamic>> getAllFullFlagConfigs() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllFullFlagConfigs,
          [],
        ),
        returnValue: <String, Map<String, dynamic>>{},
      ) as Map<String, Map<String, dynamic>>);

  @override
  bool hasConfiguration() => (super.noSuchMethod(
        Invocation.method(
          #hasConfiguration,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void shutdown() => super.noSuchMethod(
        Invocation.method(
          #shutdown,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<bool> refreshConfigs() => (super.noSuchMethod(
        Invocation.method(
          #refreshConfigs,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  void dumpConfigMap() => super.noSuchMethod(
        Invocation.method(
          #dumpConfigMap,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isSdkFunctionalityEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isSdkFunctionalityEnabled,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> waitForInitialLoad() => (super.noSuchMethod(
        Invocation.method(
          #waitForInitialLoad,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void updateConfigsFromClient(Map<String, dynamic>? newConfigs) =>
      super.noSuchMethod(
        Invocation.method(
          #updateConfigsFromClient,
          [newConfigs],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOfflineMode(bool? offline) => super.noSuchMethod(
        Invocation.method(
          #setOfflineMode,
          [offline],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onConnectionStatusChanged(
    _i8.ConnectionStatus? status,
    _i3.ConnectionInformation? info,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onConnectionStatusChanged,
          [
            status,
            info,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setupListeners({
    required void Function(_i9.CFConfig)? onConfigChange,
    required _i10.SummaryManager? summaryManager,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setupListeners,
          [],
          {
            #onConfigChange: onConfigChange,
            #summaryManager: summaryManager,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConnectionManagerImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionManagerImpl extends _i1.Mock
    implements _i11.ConnectionManagerImpl {
  MockConnectionManagerImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setupListeners() => super.noSuchMethod(
        Invocation.method(
          #setupListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isOffline() => (super.noSuchMethod(
        Invocation.method(
          #isOffline,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i8.ConnectionStatus getConnectionStatus() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionStatus,
          [],
        ),
        returnValue: _i8.ConnectionStatus.connected,
      ) as _i8.ConnectionStatus);

  @override
  _i3.ConnectionInformation getConnectionInformation() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionInformation,
          [],
        ),
        returnValue: _FakeConnectionInformation_1(
          this,
          Invocation.method(
            #getConnectionInformation,
            [],
          ),
        ),
      ) as _i3.ConnectionInformation);

  @override
  void addConnectionStatusListener(_i11.ConnectionStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #addConnectionStatusListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeConnectionStatusListener(
          _i11.ConnectionStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeConnectionStatusListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOfflineMode(bool? offline) => super.noSuchMethod(
        Invocation.method(
          #setOfflineMode,
          [offline],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordConnectionSuccess() => super.noSuchMethod(
        Invocation.method(
          #recordConnectionSuccess,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordConnectionFailure(String? error) => super.noSuchMethod(
        Invocation.method(
          #recordConnectionFailure,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void checkConnection() => super.noSuchMethod(
        Invocation.method(
          #checkConnection,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void shutdown() => super.noSuchMethod(
        Invocation.method(
          #shutdown,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
