// Mocks generated by Mockito 5.4.6 from annotations
// in customfit_ai_flutter_sdk/test/unit/client/cf_client_initializer_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:customfit_ai_flutter_sdk/src/analytics/event/event_data.dart'
    as _i16;
import 'package:customfit_ai_flutter_sdk/src/analytics/event/event_tracker.dart'
    as _i15;
import 'package:customfit_ai_flutter_sdk/src/analytics/summary/summary_manager.dart'
    as _i14;
import 'package:customfit_ai_flutter_sdk/src/client/managers/config_manager.dart'
    as _i10;
import 'package:customfit_ai_flutter_sdk/src/client/managers/user_manager.dart'
    as _i5;
import 'package:customfit_ai_flutter_sdk/src/config/core/cf_config.dart'
    as _i13;
import 'package:customfit_ai_flutter_sdk/src/core/error/cf_result.dart' as _i3;
import 'package:customfit_ai_flutter_sdk/src/core/memory/memory_pressure_level.dart'
    as _i25;
import 'package:customfit_ai_flutter_sdk/src/core/model/application_info.dart'
    as _i9;
import 'package:customfit_ai_flutter_sdk/src/core/model/cf_user.dart' as _i2;
import 'package:customfit_ai_flutter_sdk/src/core/model/context_type.dart'
    as _i7;
import 'package:customfit_ai_flutter_sdk/src/core/model/device_context.dart'
    as _i8;
import 'package:customfit_ai_flutter_sdk/src/core/model/evaluation_context.dart'
    as _i6;
import 'package:customfit_ai_flutter_sdk/src/core/session/session_manager.dart'
    as _i22;
import 'package:customfit_ai_flutter_sdk/src/core/util/cache_manager.dart'
    as _i23;
import 'package:customfit_ai_flutter_sdk/src/core/util/type_conversion_strategy.dart'
    as _i24;
import 'package:customfit_ai_flutter_sdk/src/network/connection/connection_information.dart'
    as _i4;
import 'package:customfit_ai_flutter_sdk/src/network/connection/connection_manager.dart'
    as _i18;
import 'package:customfit_ai_flutter_sdk/src/network/connection/connection_status.dart'
    as _i17;
import 'package:customfit_ai_flutter_sdk/src/platform/app_state.dart' as _i20;
import 'package:customfit_ai_flutter_sdk/src/platform/battery_state.dart'
    as _i21;
import 'package:customfit_ai_flutter_sdk/src/platform/default_background_state_monitor.dart'
    as _i19;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCFUser_0 extends _i1.SmartFake implements _i2.CFUser {
  _FakeCFUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCFResult_1<T> extends _i1.SmartFake implements _i3.CFResult<T> {
  _FakeCFResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectionInformation_2 extends _i1.SmartFake
    implements _i4.ConnectionInformation {
  _FakeConnectionInformation_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserManager extends _i1.Mock implements _i5.UserManager {
  MockUserManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CFUser getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _FakeCFUser_0(
          this,
          Invocation.method(
            #getUser,
            [],
          ),
        ),
      ) as _i2.CFUser);

  @override
  _i3.CFResult<void> updateUser(_i2.CFUser? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #updateUser,
            [user],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> clearUser() => (super.noSuchMethod(
        Invocation.method(
          #clearUser,
          [],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #clearUser,
            [],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> addUserProperty(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserProperty,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #addUserProperty,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> addStringProperty(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStringProperty,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #addStringProperty,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> addNumberProperty(
    String? key,
    num? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNumberProperty,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #addNumberProperty,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> addBooleanProperty(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBooleanProperty,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #addBooleanProperty,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> addJsonProperty(
    String? key,
    Map<String, dynamic>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addJsonProperty,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #addJsonProperty,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> addUserProperties(Map<String, dynamic>? properties) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserProperties,
          [properties],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #addUserProperties,
            [properties],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  Map<String, dynamic> getUserProperties() => (super.noSuchMethod(
        Invocation.method(
          #getUserProperties,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i3.CFResult<void> addContext(_i6.EvaluationContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #addContext,
          [context],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #addContext,
            [context],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> removeContext(
    _i7.ContextType? type,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeContext,
          [
            type,
            key,
          ],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #removeContext,
            [
              type,
              key,
            ],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> updateDeviceContext(_i8.DeviceContext? deviceContext) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDeviceContext,
          [deviceContext],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #updateDeviceContext,
            [deviceContext],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> updateApplicationInfo(
          _i9.ApplicationInfo? applicationInfo) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateApplicationInfo,
          [applicationInfo],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #updateApplicationInfo,
            [applicationInfo],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> addPrivateStringProperty(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPrivateStringProperty,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #addPrivateStringProperty,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> addPrivateNumberProperty(
    String? key,
    num? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPrivateNumberProperty,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #addPrivateNumberProperty,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> addPrivateBooleanProperty(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPrivateBooleanProperty,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #addPrivateBooleanProperty,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> addPrivateMapProperty(
    String? key,
    Map<String, dynamic>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPrivateMapProperty,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #addPrivateMapProperty,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> addPrivateJsonProperty(
    String? key,
    Map<String, dynamic>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPrivateJsonProperty,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #addPrivateJsonProperty,
            [
              key,
              value,
            ],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> removeProperty(String? key) => (super.noSuchMethod(
        Invocation.method(
          #removeProperty,
          [key],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #removeProperty,
            [key],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> removeProperties(List<String>? keys) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeProperties,
          [keys],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #removeProperties,
            [keys],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> markPropertyAsPrivate(String? key) => (super.noSuchMethod(
        Invocation.method(
          #markPropertyAsPrivate,
          [key],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #markPropertyAsPrivate,
            [key],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  _i3.CFResult<void> markPropertiesAsPrivate(List<String>? keys) =>
      (super.noSuchMethod(
        Invocation.method(
          #markPropertiesAsPrivate,
          [keys],
        ),
        returnValue: _FakeCFResult_1<void>(
          this,
          Invocation.method(
            #markPropertiesAsPrivate,
            [keys],
          ),
        ),
      ) as _i3.CFResult<void>);

  @override
  void addUserChangeListener(void Function(_i2.CFUser)? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #addUserChangeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeUserChangeListener(void Function(_i2.CFUser)? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeUserChangeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setupListeners({required void Function(_i2.CFUser)? onUserChange}) =>
      super.noSuchMethod(
        Invocation.method(
          #setupListeners,
          [],
          {#onUserChange: onUserChange},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConfigManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigManager extends _i1.Mock implements _i10.ConfigManager {
  MockConfigManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String getString(
    String? key,
    String? defaultValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getString,
          [
            key,
            defaultValue,
          ],
        ),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.method(
            #getString,
            [
              key,
              defaultValue,
            ],
          ),
        ),
      ) as String);

  @override
  bool getBoolean(
    String? key,
    bool? defaultValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBoolean,
          [
            key,
            defaultValue,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  num getNumber(
    String? key,
    num? defaultValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNumber,
          [
            key,
            defaultValue,
          ],
        ),
        returnValue: 0,
      ) as num);

  @override
  Map<String, dynamic> getJson(
    String? key,
    Map<String, dynamic>? defaultValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJson,
          [
            key,
            defaultValue,
          ],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  T getConfigValue<T>(
    String? key,
    T? defaultValue,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConfigValue,
          [
            key,
            defaultValue,
          ],
        ),
        returnValue: _i11.dummyValue<T>(
          this,
          Invocation.method(
            #getConfigValue,
            [
              key,
              defaultValue,
            ],
          ),
        ),
      ) as T);

  @override
  void addConfigListener<T>(
    String? key,
    void Function(T)? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addConfigListener,
          [
            key,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeConfigListener<T>(
    String? key,
    void Function(T)? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeConfigListener,
          [
            key,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearConfigListeners(String? key) => super.noSuchMethod(
        Invocation.method(
          #clearConfigListeners,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> getAllFlags() => (super.noSuchMethod(
        Invocation.method(
          #getAllFlags,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic>? getFullFlagConfig(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getFullFlagConfig,
        [key],
      )) as Map<String, dynamic>?);

  @override
  bool hasConfiguration() => (super.noSuchMethod(
        Invocation.method(
          #hasConfiguration,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void shutdown() => super.noSuchMethod(
        Invocation.method(
          #shutdown,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<bool> refreshConfigs() => (super.noSuchMethod(
        Invocation.method(
          #refreshConfigs,
          [],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  void dumpConfigMap() => super.noSuchMethod(
        Invocation.method(
          #dumpConfigMap,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isSdkFunctionalityEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isSdkFunctionalityEnabled,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void updateConfigsFromClient(Map<String, dynamic>? newConfigs) =>
      super.noSuchMethod(
        Invocation.method(
          #updateConfigsFromClient,
          [newConfigs],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<void> waitForInitialLoad() => (super.noSuchMethod(
        Invocation.method(
          #waitForInitialLoad,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  void setupListeners({
    required void Function(_i13.CFConfig)? onConfigChange,
    required _i14.SummaryManager? summaryManager,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setupListeners,
          [],
          {
            #onConfigChange: onConfigChange,
            #summaryManager: summaryManager,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [EventTracker].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventTracker extends _i1.Mock implements _i15.EventTracker {
  MockEventTracker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setupListeners({void Function(_i16.EventData)? onEventTracked}) =>
      super.noSuchMethod(
        Invocation.method(
          #setupListeners,
          [],
          {#onEventTracked: onEventTracked},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<_i3.CFResult<void>> trackEvent(
    String? eventName,
    Map<String, dynamic>? properties,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackEvent,
          [
            eventName,
            properties,
          ],
        ),
        returnValue:
            _i12.Future<_i3.CFResult<void>>.value(_FakeCFResult_1<void>(
          this,
          Invocation.method(
            #trackEvent,
            [
              eventName,
              properties,
            ],
          ),
        )),
      ) as _i12.Future<_i3.CFResult<void>>);

  @override
  _i12.Future<_i3.CFResult<void>> trackBatch(List<_i16.EventData>? events) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackBatch,
          [events],
        ),
        returnValue:
            _i12.Future<_i3.CFResult<void>>.value(_FakeCFResult_1<void>(
          this,
          Invocation.method(
            #trackBatch,
            [events],
          ),
        )),
      ) as _i12.Future<_i3.CFResult<void>>);

  @override
  _i12.Future<_i3.CFResult<List<_i16.EventData>>> trackEvents(
          List<_i16.EventData>? events) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackEvents,
          [events],
        ),
        returnValue: _i12.Future<_i3.CFResult<List<_i16.EventData>>>.value(
            _FakeCFResult_1<List<_i16.EventData>>(
          this,
          Invocation.method(
            #trackEvents,
            [events],
          ),
        )),
      ) as _i12.Future<_i3.CFResult<List<_i16.EventData>>>);

  @override
  _i12.Future<_i3.CFResult<bool>> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue:
            _i12.Future<_i3.CFResult<bool>>.value(_FakeCFResult_1<bool>(
          this,
          Invocation.method(
            #flush,
            [],
          ),
        )),
      ) as _i12.Future<_i3.CFResult<bool>>);

  @override
  void onConnectionStatusChanged(
    _i17.ConnectionStatus? status,
    _i4.ConnectionInformation? info,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onConnectionStatusChanged,
          [
            status,
            info,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setEventCallback(_i15.EventCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #setEventCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOnEventsDroppedCallback(
          void Function(
            int,
            String,
          )? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #setOnEventsDroppedCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOnBackpressureAppliedCallback(
          void Function(Map<String, dynamic>)? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #setOnBackpressureAppliedCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setAutoFlushEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setAutoFlushEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<_i3.CFResult<bool>> flushEvents() => (super.noSuchMethod(
        Invocation.method(
          #flushEvents,
          [],
        ),
        returnValue:
            _i12.Future<_i3.CFResult<bool>>.value(_FakeCFResult_1<bool>(
          this,
          Invocation.method(
            #flushEvents,
            [],
          ),
        )),
      ) as _i12.Future<_i3.CFResult<bool>>);

  @override
  int getPendingEventsCount() => (super.noSuchMethod(
        Invocation.method(
          #getPendingEventsCount,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  int getDroppedEventsCount() => (super.noSuchMethod(
        Invocation.method(
          #getDroppedEventsCount,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  void clearEvents() => super.noSuchMethod(
        Invocation.method(
          #clearEvents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<void> shutdown() => (super.noSuchMethod(
        Invocation.method(
          #shutdown,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  Map<String, dynamic> getBackpressureMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getBackpressureMetrics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> getHealthMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getHealthMetrics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [ConnectionManagerImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionManagerImpl extends _i1.Mock
    implements _i18.ConnectionManagerImpl {
  MockConnectionManagerImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setupListeners() => super.noSuchMethod(
        Invocation.method(
          #setupListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isOffline() => (super.noSuchMethod(
        Invocation.method(
          #isOffline,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i17.ConnectionStatus getConnectionStatus() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionStatus,
          [],
        ),
        returnValue: _i17.ConnectionStatus.connected,
      ) as _i17.ConnectionStatus);

  @override
  _i4.ConnectionInformation getConnectionInformation() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionInformation,
          [],
        ),
        returnValue: _FakeConnectionInformation_2(
          this,
          Invocation.method(
            #getConnectionInformation,
            [],
          ),
        ),
      ) as _i4.ConnectionInformation);

  @override
  void addConnectionStatusListener(_i18.ConnectionStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #addConnectionStatusListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeConnectionStatusListener(
          _i18.ConnectionStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeConnectionStatusListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOfflineMode(bool? offline) => super.noSuchMethod(
        Invocation.method(
          #setOfflineMode,
          [offline],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordConnectionSuccess() => super.noSuchMethod(
        Invocation.method(
          #recordConnectionSuccess,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void recordConnectionFailure(String? error) => super.noSuchMethod(
        Invocation.method(
          #recordConnectionFailure,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void checkConnection() => super.noSuchMethod(
        Invocation.method(
          #checkConnection,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void shutdown() => super.noSuchMethod(
        Invocation.method(
          #shutdown,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BackgroundStateMonitor].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackgroundStateMonitor extends _i1.Mock
    implements _i19.BackgroundStateMonitor {
  MockBackgroundStateMonitor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addAppStateListener(_i20.AppStateListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #addAppStateListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAppStateListener(_i20.AppStateListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeAppStateListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addBatteryStateListener(_i21.BatteryStateListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #addBatteryStateListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeBatteryStateListener(_i21.BatteryStateListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeBatteryStateListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i20.AppState getCurrentAppState() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentAppState,
          [],
        ),
        returnValue: _i20.AppState.active,
      ) as _i20.AppState);

  @override
  _i21.BatteryState getCurrentBatteryState() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentBatteryState,
          [],
        ),
        returnValue: _i21.BatteryState.full,
      ) as _i21.BatteryState);

  @override
  int getCurrentBatteryLevel() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentBatteryLevel,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  void shutdown() => super.noSuchMethod(
        Invocation.method(
          #shutdown,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SessionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionManager extends _i1.Mock implements _i22.SessionManager {
  MockSessionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String getCurrentSessionId() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentSessionId,
          [],
        ),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.method(
            #getCurrentSessionId,
            [],
          ),
        ),
      ) as String);

  @override
  _i12.Future<void> updateActivity() => (super.noSuchMethod(
        Invocation.method(
          #updateActivity,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> onAppBackground() => (super.noSuchMethod(
        Invocation.method(
          #onAppBackground,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> onAppForeground() => (super.noSuchMethod(
        Invocation.method(
          #onAppForeground,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> onAuthenticationChange(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #onAuthenticationChange,
          [userId],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> onNetworkChange() => (super.noSuchMethod(
        Invocation.method(
          #onNetworkChange,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<String> forceRotation() => (super.noSuchMethod(
        Invocation.method(
          #forceRotation,
          [],
        ),
        returnValue: _i12.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #forceRotation,
            [],
          ),
        )),
      ) as _i12.Future<String>);

  @override
  void addListener(_i22.SessionRotationListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i22.SessionRotationListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> getSessionStats() => (super.noSuchMethod(
        Invocation.method(
          #getSessionStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [CacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheManager extends _i1.Mock implements _i23.CacheManager {
  MockCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get componentName => (super.noSuchMethod(
        Invocation.getter(#componentName),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#componentName),
        ),
      ) as String);

  @override
  int get memoryPriority => (super.noSuchMethod(
        Invocation.getter(#memoryPriority),
        returnValue: 0,
      ) as int);

  @override
  bool get canCleanup => (super.noSuchMethod(
        Invocation.getter(#canCleanup),
        returnValue: false,
      ) as bool);

  @override
  int get estimatedMemoryUsage => (super.noSuchMethod(
        Invocation.getter(#estimatedMemoryUsage),
        returnValue: 0,
      ) as int);

  @override
  _i12.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<bool> put<T>(
    String? key,
    T? value, {
    _i23.CachePolicy? policy = _i23.CachePolicy.standard,
    Map<String, String>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
          {
            #policy: policy,
            #metadata: metadata,
          },
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<T?> get<T>(
    String? key, {
    bool? allowExpired = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
          {#allowExpired: allowExpired},
        ),
        returnValue: _i12.Future<T?>.value(),
      ) as _i12.Future<T?>);

  @override
  void registerConversionStrategy(
          _i24.TypeConversionStrategy<dynamic>? strategy) =>
      super.noSuchMethod(
        Invocation.method(
          #registerConversionStrategy,
          [strategy],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeConversionStrategy<
          T extends _i24.TypeConversionStrategy<dynamic>>() =>
      super.noSuchMethod(
        Invocation.method(
          #removeConversionStrategy,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasConversionStrategyFor(Type? type) => (super.noSuchMethod(
        Invocation.method(
          #hasConversionStrategyFor,
          [type],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i12.Future<bool> contains(String? key) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [key],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<T?> refresh<T>(
    String? key,
    _i12.Future<T> Function()? provider, {
    _i23.CachePolicy? policy = _i23.CachePolicy.standard,
    Map<String, String>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [
            key,
            provider,
          ],
          {
            #policy: policy,
            #metadata: metadata,
          },
        ),
        returnValue: _i12.Future<T?>.value(),
      ) as _i12.Future<T?>);

  @override
  _i12.Future<T?> getOrFetch<T>(
    String? key,
    _i12.Future<T> Function()? provider, {
    _i23.CachePolicy? policy = _i23.CachePolicy.standard,
    Map<String, String>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrFetch,
          [
            key,
            provider,
          ],
          {
            #policy: policy,
            #metadata: metadata,
          },
        ),
        returnValue: _i12.Future<T?>.value(),
      ) as _i12.Future<T?>);

  @override
  _i12.Future<Map<String, dynamic>> getCacheSizeStats() => (super.noSuchMethod(
        Invocation.method(
          #getCacheSizeStats,
          [],
        ),
        returnValue:
            _i12.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i12.Future<Map<String, dynamic>>);

  @override
  _i12.Future<_i3.CFResult<bool>> clearImproved() => (super.noSuchMethod(
        Invocation.method(
          #clearImproved,
          [],
        ),
        returnValue:
            _i12.Future<_i3.CFResult<bool>>.value(_FakeCFResult_1<bool>(
          this,
          Invocation.method(
            #clearImproved,
            [],
          ),
        )),
      ) as _i12.Future<_i3.CFResult<bool>>);

  @override
  _i12.Future<_i3.CFResult<T>> refreshImproved<T>(
    String? key,
    _i12.Future<T> Function()? provider, {
    _i23.CachePolicy? policy = _i23.CachePolicy.standard,
    Map<String, String>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshImproved,
          [
            key,
            provider,
          ],
          {
            #policy: policy,
            #metadata: metadata,
          },
        ),
        returnValue: _i12.Future<_i3.CFResult<T>>.value(_FakeCFResult_1<T>(
          this,
          Invocation.method(
            #refreshImproved,
            [
              key,
              provider,
            ],
            {
              #policy: policy,
              #metadata: metadata,
            },
          ),
        )),
      ) as _i12.Future<_i3.CFResult<T>>);

  @override
  _i12.Future<_i3.CFResult<T>> getOrFetchImproved<T>(
    String? key,
    _i12.Future<T> Function()? provider, {
    _i23.CachePolicy? policy = _i23.CachePolicy.standard,
    Map<String, String>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrFetchImproved,
          [
            key,
            provider,
          ],
          {
            #policy: policy,
            #metadata: metadata,
          },
        ),
        returnValue: _i12.Future<_i3.CFResult<T>>.value(_FakeCFResult_1<T>(
          this,
          Invocation.method(
            #getOrFetchImproved,
            [
              key,
              provider,
            ],
            {
              #policy: policy,
              #metadata: metadata,
            },
          ),
        )),
      ) as _i12.Future<_i3.CFResult<T>>);

  @override
  _i12.Future<_i3.CFResult<T>> getImproved<T>(
    String? key, {
    bool? allowExpired = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImproved,
          [key],
          {#allowExpired: allowExpired},
        ),
        returnValue: _i12.Future<_i3.CFResult<T>>.value(_FakeCFResult_1<T>(
          this,
          Invocation.method(
            #getImproved,
            [key],
            {#allowExpired: allowExpired},
          ),
        )),
      ) as _i12.Future<_i3.CFResult<T>>);

  @override
  _i12.Future<void> onMemoryPressure(_i25.MemoryPressureLevel? level) =>
      (super.noSuchMethod(
        Invocation.method(
          #onMemoryPressure,
          [level],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}
