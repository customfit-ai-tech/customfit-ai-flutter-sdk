// Mocks generated by Mockito 5.4.6 from annotations
// in customfit_ai_flutter_sdk/test/unit/analytics/summary/summary_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:customfit_ai_flutter_sdk/src/config/core/cf_config.dart' as _i3;
import 'package:customfit_ai_flutter_sdk/src/constants/cf_constants.dart'
    as _i9;
import 'package:customfit_ai_flutter_sdk/src/core/error/cf_result.dart' as _i2;
import 'package:customfit_ai_flutter_sdk/src/core/model/application_info.dart'
    as _i13;
import 'package:customfit_ai_flutter_sdk/src/core/model/cf_user.dart' as _i4;
import 'package:customfit_ai_flutter_sdk/src/core/model/context_type.dart'
    as _i11;
import 'package:customfit_ai_flutter_sdk/src/core/model/device_context.dart'
    as _i12;
import 'package:customfit_ai_flutter_sdk/src/core/model/evaluation_context.dart'
    as _i10;
import 'package:customfit_ai_flutter_sdk/src/network/http_client.dart' as _i5;
import 'package:dio/dio.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCFResult_0<T> extends _i1.SmartFake implements _i2.CFResult<T> {
  _FakeCFResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCFConfig_1 extends _i1.SmartFake implements _i3.CFConfig {
  _FakeCFConfig_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCFUser_2 extends _i1.SmartFake implements _i4.CFUser {
  _FakeCFUser_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.HttpClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void updateConnectionTimeout(int? timeoutMs) => super.noSuchMethod(
        Invocation.method(
          #updateConnectionTimeout,
          [timeoutMs],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateReadTimeout(int? timeoutMs) => super.noSuchMethod(
        Invocation.method(
          #updateReadTimeout,
          [timeoutMs],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i2.CFResult<Map<String, String>>> fetchMetadata(
    String? url, {
    String? lastModified,
    String? etag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMetadata,
          [url],
          {
            #lastModified: lastModified,
            #etag: etag,
          },
        ),
        returnValue: _i6.Future<_i2.CFResult<Map<String, String>>>.value(
            _FakeCFResult_0<Map<String, String>>(
          this,
          Invocation.method(
            #fetchMetadata,
            [url],
            {
              #lastModified: lastModified,
              #etag: etag,
            },
          ),
        )),
      ) as _i6.Future<_i2.CFResult<Map<String, String>>>);

  @override
  _i6.Future<_i2.CFResult<Map<String, dynamic>>> fetchJson(String? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchJson,
          [url],
        ),
        returnValue: _i6.Future<_i2.CFResult<Map<String, dynamic>>>.value(
            _FakeCFResult_0<Map<String, dynamic>>(
          this,
          Invocation.method(
            #fetchJson,
            [url],
          ),
        )),
      ) as _i6.Future<_i2.CFResult<Map<String, dynamic>>>);

  @override
  _i6.Future<_i2.CFResult<bool>> postJson(
    String? url,
    String? payload,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #postJson,
          [
            url,
            payload,
          ],
        ),
        returnValue: _i6.Future<_i2.CFResult<bool>>.value(_FakeCFResult_0<bool>(
          this,
          Invocation.method(
            #postJson,
            [
              url,
              payload,
            ],
          ),
        )),
      ) as _i6.Future<_i2.CFResult<bool>>);

  @override
  _i6.Future<_i2.CFResult<T>> post<T>(
    String? path, {
    dynamic data,
    Map<String, String>? headers,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i6.Future<_i2.CFResult<T>>.value(_FakeCFResult_0<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i6.Future<_i2.CFResult<T>>);

  @override
  _i6.Future<_i2.CFResult<Map<String, String>>> head(
    String? path, {
    Map<String, String>? headers,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i6.Future<_i2.CFResult<Map<String, String>>>.value(
            _FakeCFResult_0<Map<String, String>>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i6.Future<_i2.CFResult<Map<String, String>>>);

  @override
  Map<String, dynamic> getConnectionPoolMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionPoolMetrics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void cleanup() => super.noSuchMethod(
        Invocation.method(
          #cleanup,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i2.CFResult<T>> get<T>(
    String? path, {
    Map<String, String>? headers,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i6.Future<_i2.CFResult<T>>.value(_FakeCFResult_0<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i6.Future<_i2.CFResult<T>>);

  @override
  _i6.Future<_i2.CFResult<T>> put<T>(
    String? path, {
    dynamic data,
    Map<String, String>? headers,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #headers: headers,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i6.Future<_i2.CFResult<T>>.value(_FakeCFResult_0<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #headers: headers,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i6.Future<_i2.CFResult<T>>);

  @override
  String getBaseUrl() => (super.noSuchMethod(
        Invocation.method(
          #getBaseUrl,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getBaseUrl,
            [],
          ),
        ),
      ) as String);

  @override
  String getFullUrl(String? path) => (super.noSuchMethod(
        Invocation.method(
          #getFullUrl,
          [path],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getFullUrl,
            [path],
          ),
        ),
      ) as String);

  @override
  _i6.Future<_i2.CFResult<_i8.Response<dynamic>>> headResponse(
    String? path, {
    _i8.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headResponse,
          [path],
          {#options: options},
        ),
        returnValue: _i6.Future<_i2.CFResult<_i8.Response<dynamic>>>.value(
            _FakeCFResult_0<_i8.Response<dynamic>>(
          this,
          Invocation.method(
            #headResponse,
            [path],
            {#options: options},
          ),
        )),
      ) as _i6.Future<_i2.CFResult<_i8.Response<dynamic>>>);
}

/// A class which mocks [CFConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockCFConfig extends _i1.Mock implements _i3.CFConfig {
  MockCFConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get clientKey => (super.noSuchMethod(
        Invocation.getter(#clientKey),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#clientKey),
        ),
      ) as String);

  @override
  _i9.CFEnvironment get environment => (super.noSuchMethod(
        Invocation.getter(#environment),
        returnValue: _i9.CFEnvironment.production,
      ) as _i9.CFEnvironment);

  @override
  int get eventsQueueSize => (super.noSuchMethod(
        Invocation.getter(#eventsQueueSize),
        returnValue: 0,
      ) as int);

  @override
  int get eventsFlushTimeSeconds => (super.noSuchMethod(
        Invocation.getter(#eventsFlushTimeSeconds),
        returnValue: 0,
      ) as int);

  @override
  int get eventsFlushIntervalMs => (super.noSuchMethod(
        Invocation.getter(#eventsFlushIntervalMs),
        returnValue: 0,
      ) as int);

  @override
  int get maxRetryAttempts => (super.noSuchMethod(
        Invocation.getter(#maxRetryAttempts),
        returnValue: 0,
      ) as int);

  @override
  int get retryInitialDelayMs => (super.noSuchMethod(
        Invocation.getter(#retryInitialDelayMs),
        returnValue: 0,
      ) as int);

  @override
  int get retryMaxDelayMs => (super.noSuchMethod(
        Invocation.getter(#retryMaxDelayMs),
        returnValue: 0,
      ) as int);

  @override
  double get retryBackoffMultiplier => (super.noSuchMethod(
        Invocation.getter(#retryBackoffMultiplier),
        returnValue: 0.0,
      ) as double);

  @override
  int get summariesQueueSize => (super.noSuchMethod(
        Invocation.getter(#summariesQueueSize),
        returnValue: 0,
      ) as int);

  @override
  int get summariesFlushTimeSeconds => (super.noSuchMethod(
        Invocation.getter(#summariesFlushTimeSeconds),
        returnValue: 0,
      ) as int);

  @override
  int get summariesFlushIntervalMs => (super.noSuchMethod(
        Invocation.getter(#summariesFlushIntervalMs),
        returnValue: 0,
      ) as int);

  @override
  int get sdkSettingsCheckIntervalMs => (super.noSuchMethod(
        Invocation.getter(#sdkSettingsCheckIntervalMs),
        returnValue: 0,
      ) as int);

  @override
  int get networkConnectionTimeoutMs => (super.noSuchMethod(
        Invocation.getter(#networkConnectionTimeoutMs),
        returnValue: 0,
      ) as int);

  @override
  int get networkReadTimeoutMs => (super.noSuchMethod(
        Invocation.getter(#networkReadTimeoutMs),
        returnValue: 0,
      ) as int);

  @override
  bool get loggingEnabled => (super.noSuchMethod(
        Invocation.getter(#loggingEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get debugLoggingEnabled => (super.noSuchMethod(
        Invocation.getter(#debugLoggingEnabled),
        returnValue: false,
      ) as bool);

  @override
  String get logLevel => (super.noSuchMethod(
        Invocation.getter(#logLevel),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#logLevel),
        ),
      ) as String);

  @override
  bool get offlineMode => (super.noSuchMethod(
        Invocation.getter(#offlineMode),
        returnValue: false,
      ) as bool);

  @override
  bool get disableBackgroundPolling => (super.noSuchMethod(
        Invocation.getter(#disableBackgroundPolling),
        returnValue: false,
      ) as bool);

  @override
  int get backgroundPollingIntervalMs => (super.noSuchMethod(
        Invocation.getter(#backgroundPollingIntervalMs),
        returnValue: 0,
      ) as int);

  @override
  bool get useReducedPollingWhenBatteryLow => (super.noSuchMethod(
        Invocation.getter(#useReducedPollingWhenBatteryLow),
        returnValue: false,
      ) as bool);

  @override
  int get reducedPollingIntervalMs => (super.noSuchMethod(
        Invocation.getter(#reducedPollingIntervalMs),
        returnValue: 0,
      ) as int);

  @override
  int get maxStoredEvents => (super.noSuchMethod(
        Invocation.getter(#maxStoredEvents),
        returnValue: 0,
      ) as int);

  @override
  bool get autoEnvAttributesEnabled => (super.noSuchMethod(
        Invocation.getter(#autoEnvAttributesEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get localStorageEnabled => (super.noSuchMethod(
        Invocation.getter(#localStorageEnabled),
        returnValue: false,
      ) as bool);

  @override
  int get configCacheTtlSeconds => (super.noSuchMethod(
        Invocation.getter(#configCacheTtlSeconds),
        returnValue: 0,
      ) as int);

  @override
  int get eventCacheTtlSeconds => (super.noSuchMethod(
        Invocation.getter(#eventCacheTtlSeconds),
        returnValue: 0,
      ) as int);

  @override
  int get summaryCacheTtlSeconds => (super.noSuchMethod(
        Invocation.getter(#summaryCacheTtlSeconds),
        returnValue: 0,
      ) as int);

  @override
  int get maxCacheSizeMb => (super.noSuchMethod(
        Invocation.getter(#maxCacheSizeMb),
        returnValue: 0,
      ) as int);

  @override
  bool get remoteLoggingEnabled => (super.noSuchMethod(
        Invocation.getter(#remoteLoggingEnabled),
        returnValue: false,
      ) as bool);

  @override
  String get remoteLogProvider => (super.noSuchMethod(
        Invocation.getter(#remoteLogProvider),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#remoteLogProvider),
        ),
      ) as String);

  @override
  String get remoteLogLevel => (super.noSuchMethod(
        Invocation.getter(#remoteLogLevel),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#remoteLogLevel),
        ),
      ) as String);

  @override
  int get remoteLogBatchSize => (super.noSuchMethod(
        Invocation.getter(#remoteLogBatchSize),
        returnValue: 0,
      ) as int);

  @override
  int get remoteLogFlushIntervalMs => (super.noSuchMethod(
        Invocation.getter(#remoteLogFlushIntervalMs),
        returnValue: 0,
      ) as int);

  @override
  int get remoteLogTimeout => (super.noSuchMethod(
        Invocation.getter(#remoteLogTimeout),
        returnValue: 0,
      ) as int);

  @override
  bool get persistCacheAcrossRestarts => (super.noSuchMethod(
        Invocation.getter(#persistCacheAcrossRestarts),
        returnValue: false,
      ) as bool);

  @override
  bool get useStaleWhileRevalidate => (super.noSuchMethod(
        Invocation.getter(#useStaleWhileRevalidate),
        returnValue: false,
      ) as bool);

  @override
  bool get certificatePinningEnabled => (super.noSuchMethod(
        Invocation.getter(#certificatePinningEnabled),
        returnValue: false,
      ) as bool);

  @override
  List<String> get pinnedCertificates => (super.noSuchMethod(
        Invocation.getter(#pinnedCertificates),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get allowSelfSignedCertificates => (super.noSuchMethod(
        Invocation.getter(#allowSelfSignedCertificates),
        returnValue: false,
      ) as bool);

  @override
  bool get useSecureStorage => (super.noSuchMethod(
        Invocation.getter(#useSecureStorage),
        returnValue: false,
      ) as bool);

  @override
  List<String> get secureDataTypes => (super.noSuchMethod(
        Invocation.getter(#secureDataTypes),
        returnValue: <String>[],
      ) as List<String>);

  @override
  String get baseApiUrl => (super.noSuchMethod(
        Invocation.getter(#baseApiUrl),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#baseApiUrl),
        ),
      ) as String);

  @override
  String get sdkSettingsBaseUrl => (super.noSuchMethod(
        Invocation.getter(#sdkSettingsBaseUrl),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#sdkSettingsBaseUrl),
        ),
      ) as String);

  @override
  _i3.CFConfig copyWith({
    String? clientKey,
    _i9.CFEnvironment? environment,
    int? eventsQueueSize,
    int? eventsFlushTimeSeconds,
    int? eventsFlushIntervalMs,
    int? maxRetryAttempts,
    int? retryInitialDelayMs,
    int? retryMaxDelayMs,
    double? retryBackoffMultiplier,
    int? summariesQueueSize,
    int? summariesFlushTimeSeconds,
    int? summariesFlushIntervalMs,
    int? sdkSettingsCheckIntervalMs,
    int? networkConnectionTimeoutMs,
    int? networkReadTimeoutMs,
    bool? loggingEnabled,
    bool? debugLoggingEnabled,
    String? logLevel,
    bool? offlineMode,
    bool? disableBackgroundPolling,
    int? backgroundPollingIntervalMs,
    bool? useReducedPollingWhenBatteryLow,
    int? reducedPollingIntervalMs,
    int? maxStoredEvents,
    bool? autoEnvAttributesEnabled,
    bool? localStorageEnabled,
    int? configCacheTtlSeconds,
    int? eventCacheTtlSeconds,
    int? summaryCacheTtlSeconds,
    int? maxCacheSizeMb,
    bool? persistCacheAcrossRestarts,
    bool? useStaleWhileRevalidate,
    bool? remoteLoggingEnabled,
    String? remoteLogProvider,
    String? remoteLogEndpoint,
    String? remoteLogApiKey,
    String? remoteLogLevel,
    int? remoteLogBatchSize,
    int? remoteLogFlushIntervalMs,
    int? remoteLogTimeout,
    Map<String, dynamic>? remoteLogMetadata,
    bool? certificatePinningEnabled,
    List<String>? pinnedCertificates,
    bool? allowSelfSignedCertificates,
    bool? enableMemoryManagement,
    Map<String, double>? memoryPressureThresholds,
    int? memoryMonitoringIntervalSeconds,
    bool? useSecureStorage,
    List<String>? secureDataTypes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #clientKey: clientKey,
            #environment: environment,
            #eventsQueueSize: eventsQueueSize,
            #eventsFlushTimeSeconds: eventsFlushTimeSeconds,
            #eventsFlushIntervalMs: eventsFlushIntervalMs,
            #maxRetryAttempts: maxRetryAttempts,
            #retryInitialDelayMs: retryInitialDelayMs,
            #retryMaxDelayMs: retryMaxDelayMs,
            #retryBackoffMultiplier: retryBackoffMultiplier,
            #summariesQueueSize: summariesQueueSize,
            #summariesFlushTimeSeconds: summariesFlushTimeSeconds,
            #summariesFlushIntervalMs: summariesFlushIntervalMs,
            #sdkSettingsCheckIntervalMs: sdkSettingsCheckIntervalMs,
            #networkConnectionTimeoutMs: networkConnectionTimeoutMs,
            #networkReadTimeoutMs: networkReadTimeoutMs,
            #loggingEnabled: loggingEnabled,
            #debugLoggingEnabled: debugLoggingEnabled,
            #logLevel: logLevel,
            #offlineMode: offlineMode,
            #disableBackgroundPolling: disableBackgroundPolling,
            #backgroundPollingIntervalMs: backgroundPollingIntervalMs,
            #useReducedPollingWhenBatteryLow: useReducedPollingWhenBatteryLow,
            #reducedPollingIntervalMs: reducedPollingIntervalMs,
            #maxStoredEvents: maxStoredEvents,
            #autoEnvAttributesEnabled: autoEnvAttributesEnabled,
            #localStorageEnabled: localStorageEnabled,
            #configCacheTtlSeconds: configCacheTtlSeconds,
            #eventCacheTtlSeconds: eventCacheTtlSeconds,
            #summaryCacheTtlSeconds: summaryCacheTtlSeconds,
            #maxCacheSizeMb: maxCacheSizeMb,
            #persistCacheAcrossRestarts: persistCacheAcrossRestarts,
            #useStaleWhileRevalidate: useStaleWhileRevalidate,
            #remoteLoggingEnabled: remoteLoggingEnabled,
            #remoteLogProvider: remoteLogProvider,
            #remoteLogEndpoint: remoteLogEndpoint,
            #remoteLogApiKey: remoteLogApiKey,
            #remoteLogLevel: remoteLogLevel,
            #remoteLogBatchSize: remoteLogBatchSize,
            #remoteLogFlushIntervalMs: remoteLogFlushIntervalMs,
            #remoteLogTimeout: remoteLogTimeout,
            #remoteLogMetadata: remoteLogMetadata,
            #certificatePinningEnabled: certificatePinningEnabled,
            #pinnedCertificates: pinnedCertificates,
            #allowSelfSignedCertificates: allowSelfSignedCertificates,
            #enableMemoryManagement: enableMemoryManagement,
            #memoryPressureThresholds: memoryPressureThresholds,
            #memoryMonitoringIntervalSeconds: memoryMonitoringIntervalSeconds,
            #useSecureStorage: useSecureStorage,
            #secureDataTypes: secureDataTypes,
          },
        ),
        returnValue: _FakeCFConfig_1(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #clientKey: clientKey,
              #environment: environment,
              #eventsQueueSize: eventsQueueSize,
              #eventsFlushTimeSeconds: eventsFlushTimeSeconds,
              #eventsFlushIntervalMs: eventsFlushIntervalMs,
              #maxRetryAttempts: maxRetryAttempts,
              #retryInitialDelayMs: retryInitialDelayMs,
              #retryMaxDelayMs: retryMaxDelayMs,
              #retryBackoffMultiplier: retryBackoffMultiplier,
              #summariesQueueSize: summariesQueueSize,
              #summariesFlushTimeSeconds: summariesFlushTimeSeconds,
              #summariesFlushIntervalMs: summariesFlushIntervalMs,
              #sdkSettingsCheckIntervalMs: sdkSettingsCheckIntervalMs,
              #networkConnectionTimeoutMs: networkConnectionTimeoutMs,
              #networkReadTimeoutMs: networkReadTimeoutMs,
              #loggingEnabled: loggingEnabled,
              #debugLoggingEnabled: debugLoggingEnabled,
              #logLevel: logLevel,
              #offlineMode: offlineMode,
              #disableBackgroundPolling: disableBackgroundPolling,
              #backgroundPollingIntervalMs: backgroundPollingIntervalMs,
              #useReducedPollingWhenBatteryLow: useReducedPollingWhenBatteryLow,
              #reducedPollingIntervalMs: reducedPollingIntervalMs,
              #maxStoredEvents: maxStoredEvents,
              #autoEnvAttributesEnabled: autoEnvAttributesEnabled,
              #localStorageEnabled: localStorageEnabled,
              #configCacheTtlSeconds: configCacheTtlSeconds,
              #eventCacheTtlSeconds: eventCacheTtlSeconds,
              #summaryCacheTtlSeconds: summaryCacheTtlSeconds,
              #maxCacheSizeMb: maxCacheSizeMb,
              #persistCacheAcrossRestarts: persistCacheAcrossRestarts,
              #useStaleWhileRevalidate: useStaleWhileRevalidate,
              #remoteLoggingEnabled: remoteLoggingEnabled,
              #remoteLogProvider: remoteLogProvider,
              #remoteLogEndpoint: remoteLogEndpoint,
              #remoteLogApiKey: remoteLogApiKey,
              #remoteLogLevel: remoteLogLevel,
              #remoteLogBatchSize: remoteLogBatchSize,
              #remoteLogFlushIntervalMs: remoteLogFlushIntervalMs,
              #remoteLogTimeout: remoteLogTimeout,
              #remoteLogMetadata: remoteLogMetadata,
              #certificatePinningEnabled: certificatePinningEnabled,
              #pinnedCertificates: pinnedCertificates,
              #allowSelfSignedCertificates: allowSelfSignedCertificates,
              #enableMemoryManagement: enableMemoryManagement,
              #memoryPressureThresholds: memoryPressureThresholds,
              #memoryMonitoringIntervalSeconds: memoryMonitoringIntervalSeconds,
              #useSecureStorage: useSecureStorage,
              #secureDataTypes: secureDataTypes,
            },
          ),
        ),
      ) as _i3.CFConfig);

  @override
  _i3.CFConfig getOrThrow() => (super.noSuchMethod(
        Invocation.method(
          #getOrThrow,
          [],
        ),
        returnValue: _FakeCFConfig_1(
          this,
          Invocation.method(
            #getOrThrow,
            [],
          ),
        ),
      ) as _i3.CFConfig);
}

/// A class which mocks [CFUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockCFUser extends _i1.Mock implements _i4.CFUser {
  MockCFUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get anonymous => (super.noSuchMethod(
        Invocation.getter(#anonymous),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> get properties => (super.noSuchMethod(
        Invocation.getter(#properties),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  List<_i10.EvaluationContext> get contexts => (super.noSuchMethod(
        Invocation.getter(#contexts),
        returnValue: <_i10.EvaluationContext>[],
      ) as List<_i10.EvaluationContext>);

  @override
  _i4.CFUser getOrThrow() => (super.noSuchMethod(
        Invocation.method(
          #getOrThrow,
          [],
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #getOrThrow,
            [],
          ),
        ),
      ) as _i4.CFUser);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.CFUser addProperty(
    String? key,
    dynamic value, {
    bool? isPrivate = false,
    bool? isSession = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addProperty,
          [
            key,
            value,
          ],
          {
            #isPrivate: isPrivate,
            #isSession: isSession,
          },
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #addProperty,
            [
              key,
              value,
            ],
            {
              #isPrivate: isPrivate,
              #isSession: isSession,
            },
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser addStringProperty(
    String? key,
    String? value, {
    bool? isPrivate = false,
    bool? isSession = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStringProperty,
          [
            key,
            value,
          ],
          {
            #isPrivate: isPrivate,
            #isSession: isSession,
          },
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #addStringProperty,
            [
              key,
              value,
            ],
            {
              #isPrivate: isPrivate,
              #isSession: isSession,
            },
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser addNumberProperty(
    String? key,
    num? value, {
    bool? isPrivate = false,
    bool? isSession = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNumberProperty,
          [
            key,
            value,
          ],
          {
            #isPrivate: isPrivate,
            #isSession: isSession,
          },
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #addNumberProperty,
            [
              key,
              value,
            ],
            {
              #isPrivate: isPrivate,
              #isSession: isSession,
            },
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser addBooleanProperty(
    String? key,
    bool? value, {
    bool? isPrivate = false,
    bool? isSession = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBooleanProperty,
          [
            key,
            value,
          ],
          {
            #isPrivate: isPrivate,
            #isSession: isSession,
          },
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #addBooleanProperty,
            [
              key,
              value,
            ],
            {
              #isPrivate: isPrivate,
              #isSession: isSession,
            },
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser addMapProperty(
    String? key,
    Map<String, dynamic>? value, {
    bool? isPrivate = false,
    bool? isSession = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMapProperty,
          [
            key,
            value,
          ],
          {
            #isPrivate: isPrivate,
            #isSession: isSession,
          },
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #addMapProperty,
            [
              key,
              value,
            ],
            {
              #isPrivate: isPrivate,
              #isSession: isSession,
            },
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser addJsonProperty(
    String? key,
    Map<String, dynamic>? value, {
    bool? isPrivate = false,
    bool? isSession = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addJsonProperty,
          [
            key,
            value,
          ],
          {
            #isPrivate: isPrivate,
            #isSession: isSession,
          },
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #addJsonProperty,
            [
              key,
              value,
            ],
            {
              #isPrivate: isPrivate,
              #isSession: isSession,
            },
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser addGeoPointProperty(
    String? key,
    double? latitude,
    double? longitude, {
    bool? isPrivate = false,
    bool? isSession = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addGeoPointProperty,
          [
            key,
            latitude,
            longitude,
          ],
          {
            #isPrivate: isPrivate,
            #isSession: isSession,
          },
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #addGeoPointProperty,
            [
              key,
              latitude,
              longitude,
            ],
            {
              #isPrivate: isPrivate,
              #isSession: isSession,
            },
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser addContext(_i10.EvaluationContext? context) => (super.noSuchMethod(
        Invocation.method(
          #addContext,
          [context],
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #addContext,
            [context],
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser removeContext(
    _i11.ContextType? type,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeContext,
          [
            type,
            key,
          ],
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #removeContext,
            [
              type,
              key,
            ],
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser withDeviceContext(_i12.DeviceContext? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #withDeviceContext,
          [device],
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #withDeviceContext,
            [device],
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser withApplicationInfo(_i13.ApplicationInfo? application) =>
      (super.noSuchMethod(
        Invocation.method(
          #withApplicationInfo,
          [application],
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #withApplicationInfo,
            [application],
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser removeProperty(String? key) => (super.noSuchMethod(
        Invocation.method(
          #removeProperty,
          [key],
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #removeProperty,
            [key],
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser removeProperties(List<String>? keys) => (super.noSuchMethod(
        Invocation.method(
          #removeProperties,
          [keys],
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #removeProperties,
            [keys],
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser markPropertyAsPrivate(String? key) => (super.noSuchMethod(
        Invocation.method(
          #markPropertyAsPrivate,
          [key],
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #markPropertyAsPrivate,
            [key],
          ),
        ),
      ) as _i4.CFUser);

  @override
  _i4.CFUser markPropertiesAsPrivate(List<String>? keys) => (super.noSuchMethod(
        Invocation.method(
          #markPropertiesAsPrivate,
          [keys],
        ),
        returnValue: _FakeCFUser_2(
          this,
          Invocation.method(
            #markPropertiesAsPrivate,
            [keys],
          ),
        ),
      ) as _i4.CFUser);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
